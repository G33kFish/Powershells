<#
setup.ps1
​
3CX
​
Usage:
powershell -ep bypass -file <path>\setup.ps1 -setup ## uninstall then install
powershell -ep bypass -file <path>\setup.ps1 ## uninstall only
​
Sailer, Adam
2023.03.31
#>
​
​
param(
    [parameter(mandatory=$false)]
    [switch]$setup
    )
​
​
$whatIf = $false
​
​
##
##
​
​
Function KillApps {
​
	write-host "`n`n@@ KillApps" -fore cyan
​
    $array = get-process | ? { $_.Path -imatch '3cx' }
    $array; $array | stop-process -force
​
    dir $env:Temp | remove-item -recurse -force -ea 0
}
​
​
Function Uninstall {
​
	param([string]$inp)
    
​
    write-host "`n`n@@ Uninstall" -fore cyan
    	
    if (!$inp) { return }
​
​
    $keys = @()
    $keys += 'HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall'
    $keys += 'HKLM:\Software\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall'
​
    dir $keys -ea 0 | gp | ? { $_.DisplayName -imatch $inp } | % { $item = $_
​
        $item.UninstallString | ? { $_ } | % {
​
            $app = $_; $options = '/s'
​
            if ($_ -imatch 'msiexec') {
​
                $app = 'msiexec.exe'
                $guid = ($_ | sls '{.+}').Matches.Value
                $options = @(
                    '/qn'
                    "/x $guid"
                    '/norestart'
                    )
            }
​
            write-host "`nUninstall : $($item.DisplayName) $($item.DisplayVersion)"
            write-host $item.PSPath -fore cyan
			$options | % { write-host $_ -fore darkGray }
​
            if (!$whatIf) {
                
                try {
                    $process = start-process -filePath $app -argumentList $options -wait -passThru
                    $process.ExitCode
                    $process.ExitCode | ? { $_ -notin @(0,1605,1612) } | % { exit $_ }
                }
                catch {
                    write-host $error[0] -fore red
                }
                finally {
                    $item.PSPath | remove-item -recurse -force -ea 0
                }
            }
        }
    }
}
​
​
Function Purge {
​
    write-host "`n`n@@ Purge" -fore cyan
​
​
    ##
    ## Directories
​
    $paths = @(
        $env:ProgramData
        $env:ProgramFiles
        ${env:ProgramFiles(x86)}
        "$env:SystemDrive\Users\*\AppData\Local"
        "$env:SystemDrive\Users\*\AppData\Roaming"
        )
​
    dir $paths -recurse -force -directory -ea 0 | ? { $_ -imatch '3cx' } | select -exp FullName | remove-item -recurse -force -ea 0 -verbose -whatIf:$whatIf
​
​
    ##
    ## Links
    
    $paths = @(
        "$env:ProgramData\Microsoft\Windows\Start Menu\Programs"
        "$env:SystemDrive\Users\*\Desktop"
        )
​
    dir $paths -recurse -force -include *.lnk -ea 0 | ? { $_ -imatch '3cx' } | select -exp FullName | remove-item -recurse -force -ea 0 -verbose -whatIf:$whatIf
​
}
​
​
Function Setup {
​
    write-host "`n`n@@ Setup" -fore cyan
    
    
    dir $PSScriptRoot\setup -recurse -include 3CX*.msi | % { $app = $_
​
		$options = @(
            '/qn'
            "/i `"$app`""
            '/norestart'
            'allusers=1'
            )
​
        write-host "`nSetup : $($app.Name)"
		$options | % { write-host $_ -fore darkGray }
		
        if (!$whatIf) {
        
            try {           
                $process = start-process -filePath msiexec.exe -argumentList $options -wait -passThru
                $process.ExitCode
                $process.ExitCode | ? { $_ -notin @(0) } | % { exit $_ }
            }
            catch {
                write-host $error[0] -fore red
            }
            finally {
​
                dir $env:Public\Desktop -recurse -include *.lnk | ? { $_ -imatch '3CX' } | remove-item -force
            }
        }
	}
}
​
​
##
##
​
​
Clear
​
try {
​
    start-transcript -path $env:ProgramData\Scripts\3CX.log | out-null
​
    KillApps
    Uninstall '^3cx( Desktop|Phone)'
    Purge
​
    if ($setup) { Setup }
}
catch {
​
    write-host $error[0] -fore red
}
finally {
​
    stop-transcript | out-null
}
